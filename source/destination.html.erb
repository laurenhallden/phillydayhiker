---
layout: destination
---
<%
  content_for :page_title, "#{destination.name} - Philly Day Hiker"

  if destination.gallery
  	content_for :page_image, "#{destination.gallery[0].url}"
  end

  if destination.acres && destination.miles_of_trails
  content_for :page_description, "#{destination.name} has #{destination.acres} acres and roughly #{destination.miles_trails} miles of trails. Here's all the tips and information you need about hiking #{destination.name}"
  else
    if destination.acres
      content_for :page_description, "#{destination.name} has roughly #{destination.miles_trails} miles of trails. Here's all the tips and information you need about hiking #{destination.name}"
  else
    if destination.miles_trails
      content_for :page_description, "#{destination.name} is roughly #{destination.acres} acres. Here's all the tips and information you need about hiking #{destination.name}"
  else
    content_for :page_description, "#{destination.name} is within a 90-minute drive of Philadelphia. Here's all the tips and information you need about hiking #{destination.name}"
  end
%>

<%= partial 'header', locals: {thedestinations: get_destinations}  %>

<div class="map destination-map" id="zoomed-map"></div>
  </div>
  <div class="title-container">
    <div class="container">
      <h1><%= destination.name %></h1>
      <h2 class="paragraph subhead">
        <% if destination.acres && destination.miles_trails %>
          <%= destination.acres.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse %> acres&nbsp;&mdash;&nbsp;<%= destination.miles_trails %> miles of trails 
        <% elsif  destination.acres %>
          <%= destination.acres.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse %> acres
        <% elsif  destination.miles_trails %>
          <%= destination.miles_trails %> miles of trails
          <% end %>
          </h2>
        <hr/>
        <% if destination.trail_map_image %>
          <div class="outlink-wrapper">
            <a class="a-blue outlink slideout get-map" href="<%= destination.trail_map_image.url %>" target="_blank">
              <div class="link-icon"><img src="/images/map-icon.svg"/></div>
              Grab the trail map
              <i class="icon"></i>
            </a>
          </div>
        <% end %>
        <div class="outlink-wrapper">
          <a class="a-blue outlink slideout get-directions" href="http://maps.apple.com/?q=<%= destination.latitude %>,<%= destination.longitude %>" target="_blank">
            <div class="link-icon"><img src="/images/directions-icon.svg"/></div>
            Get directions
            <i class="icon"></i>
          </a>
        </div>
      </div>
    </div>
    <div class="body-container">   
      <div class="container">   
        <div class="body-content">
          <% if destination.review %>
            <%= Kramdown::Document.new(destination.review).to_html %>
          <% else %>
            <h4>Coming soon!</h4>
            <p>Check back soon for a full review of this destination.</p>
          <% end %>
          <div class="more-links">
            <div class="feedback a-blue inline" data-toggle="modal" data-target="#tipsModal">Send Feedback</div>
            <% if destination.website %>
            <span class="line">|</span><a class="a-blue inline learn-link slideout get-website" href="<%= destination.website %>" target="_blank">Learn more <i class="icon"></i></a>
            <% end %>
          </div>
          <div class="donate-cta">
            <div class="cta" data-toggle="modal" data-target="#donateModal">
              <p class="small"><i class="fa fa-heart"></i>Like this? Tip us a buck or two!</p>
            </div>
          </div>
          <div class="slug">
            <p class="small">Last updated: December 30, 2018</p>
          </div>
        </div>
      </div>
    </div>
    <% if destination.gallery %>
      <div class="gallery-container">
      <% 
        destination.gallery
        .each do |id|
      %><div class="image-container"><img class="gallery-image" src="<%= id.url %>?fm=jpg&fl=progressive&w=600&h=600" /><% if id.description %><div class="caption"><%= id.description %></div><div class="caption-indicator"></div><% end %></div><% end %></div>
    <% end %>
  </div>

<script>
  mapboxgl.accessToken = 'pk.eyJ1IjoibGF1cmVuaGFsbGRlbiIsImEiOiJjaWtvMXQzMnIwdXFwdHpqN21hMG84MGMxIn0.bMeEalyqwCOvDs_a8AeETw';
  var map = new mapboxgl.Map({
    container: 'zoomed-map', // container id
    style: 'mapbox://styles/laurenhallden/civxwk4jt006g2klkep3qszns', //stylesheet location
    center: [<%= destination.longitude %>, <%= destination.latitude %>], // starting position
    zoom: 14 // starting zoom
  });

  // Geolocation: set some options
  var options = {
    enableHighAccuracy: true,
    timeout: 10000, // wait 10 seconds before giving up
    maximumAge: 0
  };

  // Geolocation: add layer and styles for a single point
  map.on('load', function () {
    map.addSource('single-point', {
      "type": "geojson",
      "data": {
        "type": "FeatureCollection",
        "features": []
      }
    });

    map.addLayer({
      "id": "point",
      "source": "single-point",
      "type": "circle",
      "paint": {
        "circle-radius": 6,
        "circle-color": "#0388bb"
      }
    });

    // Geolocation: set success and error states for geolocation attempt
    function errorCallback() {
      alert("We were unable to find you. Does your browser accept location services?");
    }
     
    function successCallback(pos) {
      var userLocation = {
          type: 'Point',
          coordinates: [pos.coords.longitude, pos.coords.latitude]
        };
      // set point at user location
      map.getSource('single-point').setData(userLocation);
      stopProgress();
      // fly map to user location
      map.flyTo({center:[pos.coords.longitude, pos.coords.latitude]});
    }

    // Geolocation: run it
    $('#geolocate').click(function() {
       if (navigator && navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(successCallback, errorCallback);
          locatingProgress();
        } else {
          alert('Geolocation is not supported');
        }
    });

    // Popups: change popup cursors to pointer
    map.on('mousemove', function (f) {
      var pointers = map.queryRenderedFeatures(f.point, { layers: ['zoomed-features','places'] });
      map.getCanvas().style.cursor = (pointers.length) ? 'pointer' : '';
    });
  });

  // When a click event occurs near a BLUE location marker, open a popup at the location of
  // the feature, with description HTML from its properties.
  map.on('click', function (e) {
    var features = map.queryRenderedFeatures(e.point, { layers: ['places'] });

    if (!features.length) {
      return;
    } else {
      // Get coordinates from the symbol and center the map on those coordinates
      map.flyTo({center: features[0].geometry.coordinates});
    }

    var feature = features[0];

    // Populate the popup and set its coordinates
    // based on the feature found.
    var popup = new mapboxgl.Popup()
      .setLngLat(feature.geometry.coordinates)
      .setHTML("<a href='" + feature.properties.link +"'>" + feature.properties.title + "</a>")
      .addTo(map);
  });

  // When a click event occurs near a YELLOW feature marker, open a popup at the location of
  // the feature, with description HTML from its properties.
  map.on('click', function (f) {
    var highlights = map.queryRenderedFeatures(f.point, { layers: ['zoomed-features'] });

    if (!highlights.length) {
      return;
    } else {
      // Get coordinates from the symbol and center the map on those coordinates
      var oldcoords = highlights[0].geometry.coordinates;
      var oldlat = oldcoords[0];
      var oldlong = oldcoords[1];
      var newlong = (oldlong + 0.00450);
      map.flyTo({center:[oldlat, newlong]});
    }

    var highlight = highlights[0];

    // Populate the popup and set its coordinates
    // based on the feature found.
    var popup = new mapboxgl.Popup()
      .setLngLat(highlight.geometry.coordinates)
      .setHTML(highlight.properties.title + '<br/>' + highlight.properties.description)
      .addTo(map);
  });

  // Disable map zoom when using scroll
  map.scrollZoom.disable();

  // Add zoom and rotation controls to the map.
  var nav = new mapboxgl.NavigationControl();
  map.addControl(nav, 'top-left');

  var mapCanvas = $('.mapboxgl-canvas')[0];
  var mapDiv = document.getElementById('zoomed-map');

  // Add our custom control buttons for Geolocate, Fullscreen & Satellite
  $( ".mapboxgl-ctrl-top-left" ).append( "<div class='mapboxgl-ctrl mapboxgl-ctrl-group'><button class='mapboxgl-ctrl-icon mapboxgl-ctrl-icon-reset' id='reset' type='button' aria-label='Reset'></button><button class='mapboxgl-ctrl-icon mapboxgl-ctrl-icon-fullscreen' id='full-screen' type='button' aria-label='Fullscreen'></button><button class='mapboxgl-ctrl-icon mapboxgl-ctrl-icon-satellite' id='satellite' type='button' aria-label='Satellite'></button></div><div class='mapboxgl-ctrl mapboxgl-ctrl-group'><button class='mapboxgl-ctrl-icon mapboxgl-ctrl-icon-geolocate' id='geolocate' type='button' aria-label='Geolocate'></button></div>" );

  // Reset button: 
  $('#reset').click(function() {
    map.flyTo({center:[<%= destination.longitude %>, <%= destination.latitude %>], zoom:[14]});
  });

</script>
<script src="/js/fullscreen.js"></script>
<script src="/js/satellite.js"></script>
<%= partial '/partials/js' %>